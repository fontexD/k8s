apiVersion: v1
kind: ConfigMap
metadata:
  name: start.sh
  namespace: kafka
kind: ConfigMap
metadata:
  name: kafka-start.sh
  namespace: kafka
data:
  start.sh: |
    #!/bin/bash
    echo $((NODE_ID+9093))

    NODE_ID=${HOSTNAME:6}
    PORT=$(($NODE_ID+30100))
    LISTENERS="PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
    LISTENER_SECRUITY_PROTOCOOL_MAP="PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT"
    ADVERTISED_LISTENERS="PLAINTEXT://kafka-$NODE_ID.$SERVICE.$NAMESPACE.svc.cluster.local:9092,EXTERNAL://192.168.1.225:$PORT"

    export JMX_PORT="9010"
    export  KAFKA_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.rmi.port=9010 -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=192.168.1.225"

    CONTROLLER_QUORUM_VOTERS=""
    for i in $( seq 0 $REPLICAS); do
        if [[ $i != $REPLICAS ]]; then
            CONTROLLER_QUORUM_VOTERS="$CONTROLLER_QUORUM_VOTERS$i@kafka-$i.$SERVICE.$NAMESPACE.svc.cluster.local:9093,"
        else
            CONTROLLER_QUORUM_VOTERS=${CONTROLLER_QUORUM_VOTERS::-1}
        fi
    done

    mkdir -p $SHARE_DIR/$NODE_ID

    if [[ ! -f "$SHARE_DIR/cluster_id" && "$NODE_ID" = "0" ]]; then
        CLUSTER_ID=$(kafka-storage.sh random-uuid)
        echo $CLUSTER_ID > $SHARE_DIR/cluster_id
    else
        CLUSTER_ID=$(cat $SHARE_DIR/cluster_id)
    fi

    sed -e "s+^node.id=.*+node.id=$NODE_ID+" \
    -e "s+^controller.quorum.voters=.*+controller.quorum.voters=$CONTROLLER_QUORUM_VOTERS+" \
    -e "s+^listeners=.*+listeners=$LISTENERS+" \
    -e "s+^advertised.listeners=.*+advertised.listeners=$ADVERTISED_LISTENERS+" \
    -e "s+^listener.security.protocol.map=.*+listener.security.protocol.map=$LISTENER_SECRUITY_PROTOCOOL_MAP+" \
    -e "s+^log.dirs=.*+log.dirs=$SHARE_DIR/$NODE_ID+" \
    -e "s+^num.replica.fetchers=.*+num.replica.fetchers=2+" \
    -e "s+^num.partitions=.*+num.partitions=3+" \
    -e "s+^ min.insync.replicas=.*+min.insync.replicas=2+" \
    /opt/kafka/config/kraft/server.properties > server.properties.updated \
    && mv server.properties.updated /opt/kafka/config/kraft/server.properties

    echo producer.override.linger.ms=50 >> /opt/kafka/config/kraft/server.properties
    echo producer.override.batch.size=40000 >> /opt/kafka/config/kraft/server.properties

    kafka-storage.sh format -t $CLUSTER_ID -c /opt/kafka/config/kraft/server.properties

    exec kafka-server-start.sh /opt/kafka/config/kraft/server.properties
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
    env: kafka
  name: kafka-client
  namespace: kafka
spec:
  internalTrafficPolicy: Cluster
  externalIPs:
  - 192.168.1.225
  ports:
  - name: kafka-client
    port: 9092
    protocol: TCP
    targetPort: 9094
  selector:
    app: kafka
    env: kafka
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
  labels:
    app: kafka
    env: kafka
  namespace: kafka
spec:
  clusterIP: None
  ports:
    - name: '9092'
      port: 9092
      protocol: TCP
      targetPort: 9092
    - name: '9094'
      port: 9094
      protocol: TCP
  selector:
    app: kafka
    env: kafka
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
    env: kafka
    statefulset.kubernetes.io/pod-name: kafka-0
  name: kafka-demo-0-external
  namespace: kafka
spec:
  type: ClusterIP
  externalTrafficPolicy: Cluster
  ports:
  - name: tcp-kafka
    nodePort: 30100
    port: 9094
    protocol: TCP
    targetPort: kafka-external
  selector:
    app: kafka
    env: kafka
    statefulset.kubernetes.io/pod-name: kafka-0
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
    env: kafka
    statefulset.kubernetes.io/pod-name: kafka-1
  name: kafka-demo-1-external
  namespace: kafka
spec:
  type: ClusterIP
  externalTrafficPolicy: Cluster
  ports:
  - name: tcp-kafka
    nodePort: 30101
    port: 9094
    protocol: TCP
    targetPort: kafka-external
  selector:
    app: kafka
    env: kafka
    statefulset.kubernetes.io/pod-name: kafka-1
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
    env: kafka
    statefulset.kubernetes.io/pod-name: kafka-2
  name: kafka-demo-2-external
  namespace: kafka
spec:
  type: ClusterIP
  externalTrafficPolicy: Cluster
  ports:
  - name: tcp-kafka
    nodePort: 30102
    port: 9094
    protocol: TCP
    targetPort: kafka-external
  selector:
    app: kafka
    env: kafka
    statefulset.kubernetes.io/pod-name: kafka-2
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  labels:
    app: kafka
    env: kafka
  namespace: kafka
spec:
  serviceName: kafka-svc
  replicas: 3
  selector:
    matchLabels:
      app: kafka
      env: kafka
  template:
    metadata:
      labels:
        app: kafka
        env: kafka
    spec:
      imagePullSecrets:
        - name: repo_secret
      volumes:
        - name: kafka-pv-claim
          persistentVolumeClaim:
            claimName: kafka-pv-claim
        - name: start
          configMap:
            name: kafka-start.sh
            defaultMode: 0777
        - name: kafka-class
          configMap:
            name: kafka-class
            defaultMode: 0777
      containers:
        - name: kafka-container
          image: kafka 3.3_image_from_local_repo
          imagePullPolicy: Always
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "500m"
          ports:
            - containerPort: 9092
              name: kafka-client
            - containerPort: 9093
              name: kafka-internal
            - containerPort: 9094
              name: kafka-external
            - containerPort: 9010
              name: jmx
          env:
            - name: REPLICAS
              value: '3'
            - name: SERVICE
              value: kafka-svc
            - name: NAMESPACE
              value: kafka
            - name: SHARE_DIR
              value: /mnt/kafka
            - name: KAFKA_HEAP_OPTS
              value: -Xms512M -Xmx2G
            - name: KAFKA_NUM_REPLICA_FETCHERS
              value: "4"
            - name: JMX_PORT
              value: "9010"
            - name: KAFKA_JMX_OPTS
              value: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=192.168.1.225 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=9010"
          volumeMounts:
            - name: kafka-pv-claim
              mountPath: /mnt/kafka/
            - name: start
              mountPath: "/tmp/"
            - name: kafka-class
              mountPath: /opt/kafka/bin/kafka-run-class.sh
              subPath: kafka-run-class.sh
          command:
            - /bin/sh
            - -c
            - "/tmp/start.sh"
